{
  "hash": "017455b84b24b836d6e21f09f781d322",
  "result": {
    "markdown": "---\ntitle: \"05.01.23\"\nauthor: Tim\ndate: \"2023-01-05\"\ncategories: [r, stan]\n---\n\n\n# Introduction\n\nThis is my attempt to build a Rescorla-Wagner (RW) model, and apply it to FLARe data. This model will be built using Stan. I will start with a basic model, and increase complexity as I go.\n\nI am using a random sample of 10 participants. They will be from multiple studies, so this cannot be considered 'peeking' at the data. The aim is to make the output parameter distributions look reasonable, then apply the model to more data.\n\nThe data files are made via another script. I will convert data from scratch at a later time.\n\n## Setup\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n        black        orange       skyblue   bluishgreen        yellow \n    \"#000000\"     \"#E69F00\"     \"#56B4E9\"     \"#009E73\"     \"#F0E442\" \n         blue    vermillion reddishpurple          gray \n    \"#0072B2\"     \"#D55E00\"     \"#CC79A7\"     \"#999999\" \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.6      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.4.1 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nLoading required package: StanHeaders\n\nrstan (Version 2.21.7, GitRev: 2e1f913d3ca3)\n\nFor execution on a local, multicore CPU with excess RAM we recommend calling\noptions(mc.cores = parallel::detectCores()).\nTo avoid recompilation of unchanged Stan programs, we recommend calling\nrstan_options(auto_write = TRUE)\n\n\nAttaching package: 'rstan'\n\n\nThe following object is masked from 'package:tidyr':\n\n    extract\n```\n:::\n:::\n\n\n## Initial import of data, aquiring sample of 10 to work with\n\n\n::: {.cell}\n\n:::\n\n\n## Initial graphing\n\nI can plot these 10 participants, to somewhat recreate the acquisition plots in the literature. This shows an initial shape to the acquisition, at individual level, but is usually averaged for further analysis.\n\nI can also show some individual plots, to show a relationship between US and expectancy ratings. This is where the learning rate parameter, alpha, is demonstrated. And possibly tau, the choice variability / consistency parameter\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Create a tibble to plot the 10 participants. Some manipulation of variable type to make plotting easier, such as subject number as factor so colours are distinct on graph, rather than a gradient which is the default for continuous data or integer type. Trial number as integer so it sorts the x axis in numerical order. You can make it factor and specify the order with a vector, but I dont want to type out all that. \n\nplus_plot <- plus_sample %>% \n  add_column(subject = 1:10, .before = TRUE) %>% \n  pivot_longer(\n  !subject,\n  names_to = 'trial',\n  values_to = 'rating') \nplus_plot$trial <- gsub('X','',as.character(plus_plot$trial))\nplus_plot$trial <- as.integer(plus_plot$trial)\nplus_plot$subject <- as.factor(plus_plot$subject)\n\n## Separate tibble to plot the mean and sd of the 10 participants. \n\nmean_plus_plot <- plus_plot %>% \n  group_by(trial) %>% \n  summarise(mean_expectancy_rating_per_trial = mean(rating, na.rm = TRUE), sd_expectancy_rating_per_trial = sd(rating, na.rm = TRUE))\n\n## Better attempt at graphing from two tibbles. Not sure how to fix error bars yet. \n  \nggplot(NULL) +\n  geom_point(data = plus_plot, aes(x = trial, y = rating, group = subject, colour = subject)) +\n  geom_line(data = plus_plot, aes(trial, rating, group = subject, colour = subject)) +\n  scale_x_continuous(breaks = seq(1,12,1)) +\n  scale_y_continuous(breaks = seq(1,9,1)) +\n  geom_line(data = mean_plus_plot, aes(x = trial, y = mean_expectancy_rating_per_trial)) +\n  geom_point(data = mean_plus_plot, aes(x = trial, y = mean_expectancy_rating_per_trial), size = 3)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n```{.r .cell-code}\n  # geom_errorbar(data = mean_plus_plot, aes(x = trial, ymin = mean_expectancy_rating_per_trial - sd_expectancy_rating_per_trial, ymax = mean_expectancy_rating_per_trial + sd_expectancy_rating_per_trial), width = 0.2)\n```\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}