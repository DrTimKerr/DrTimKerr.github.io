{
  "hash": "eb970a0a13de73dcd47882c9c015e83c",
  "result": {
    "markdown": "---\ntitle: \"Noise & Bimodal\"\nauthor: Tim\ndate: 2023-11-12\ncategories: [r, stan]\nexecute: \n  message: false\n  warning: false\n  echo: false\n---\n\n\n# Bimodal Distribution\n\n\n::: {.cell}\n\n:::\n\n\n### Simple\n\nUse Stan to generate data with fixed parameters.\n\nA normal distribution, mean: 3, and sigma: 1.\n\n$$ y \\sim \\text{Normal}(\\mu,\\sigma) $$\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nThen use Stan to estimate parameters from this generated data.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nStan estimates a $\\mu$ of 2.9781, and a $\\sigma$ of 0.9763.\n\nWhich is 0.0219, and 0.0237 off reality.\n\n### Add samples\n\nMore samples probably means better estimates.\n\nThough basically reaches optimality at 100 samples or so, definitely by 250.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n### Adding in noise to the signal\n\nNow for some noize.\n\nAdding in an $\\epsilon$ parameter, to add to the normal distribution like in a linear regression.\n\n$$ y \\sim \\text{Normal}(\\mu,\\sigma_{\\mu}) + \\epsilon, ~ \\epsilon \\sim \\text{Normal}(0,\\sigma_{\\epsilon}) $$\n\n\n::: {.cell}\n\n:::\n\n\n$\\epsilon$ is 10, $\\sigma$ remains 1\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nHow do the estimates fare with noise.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-2.png){width=672}\n:::\n:::\n\n\nStan estimates a $\\mu$ of 2.5517, a $\\sigma$ of 5.0032, and an $\\epsilon$ of 5.1733\n\nWhich is 0.4483, -4.0032 , and 4.8267off reality.\n\nSo it struggles to unpick the noise from signal, i.e. measurement error from internal noise https://www.bmj.com/content/312/7047/1654\n\n### Priors\n\nPriors might help.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-3.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nPriors appear far too informative. The model is too basic, with noise on top of noise indistingushable, without another dimension.\n\nA better model exists within the Stan user guide \\[https://mc-stan.org/docs/stan-users-guide/bayesian-measurement-error-model.html\\]\n\n### Bimodal\n\nStan can run mixture models. \\[https://mc-stan.org/docs/stan-users-guide/summing-out-the-responsibility-parameter.html\\]\n\nYou can have a mix of $K$ normal distributions, with locations $\\mu_k$, scales $\\sigma_k$ and mixing proportions $\\lambda$ within a $K$-simplex.\n\n$$ p_y(y~ |~ \\lambda,\\mu,\\sigma) = \\sum^{K}_{k=1}\\lambda_k ~\\text{Normal}(y~|~\\mu_k,\\sigma_k)$$\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nAnd reverse estimate the parameters I put in.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-3.png){width=672}\n:::\n:::\n\n\nIt works, but interestingly, the chains get stuck on one or the other model, so for further analysis, you would have to compare chains rather than models.\n\nWhen assessing parameter estimates, the mode is probably more useful than the mean or median, given this non mixing.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}